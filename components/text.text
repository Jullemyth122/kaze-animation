In this code, I'm trying to make like a circle circumference but each item of image is an arc. The image is on plane geometry. 
And 5 items of image arc should create like a circle circumference when they are combine and make sure they at least 5 gaps each other from touching.

Note that "z" is the depth of curve of image, and "i" is the item number from 0-4 and lastly the "img" is the image string that will pass on as image file. 

As you see the PlaneLines are called 5 times by a parent, which is the PlaneGeometryImage

const PlaneGeometryImage = () => {
    return (<>
        {["./img/hot spring (1).png","./img/night city (1).png"].map((elem,i) => {
            return (
                <>
                    <PlaneLines key={i} img={elem} i = {i}/>
                </>
            )
        })}
    </>)
}

And then after this is the PlaneLines that called. As you its a plane image...
and supposingly they make a circle circumference arc with atleast 5 - gaps in the useLayoutEffect

interface PlaneLineImg {
    img: string;
    i: number
}

const PlaneLines = ({img,i}:PlaneLineImg) => {

    const planeRef = useRef<any>(null);
    const texture = useTexture(img)

    ... // useLayoutEffect (
        ...
    )


    return (
        <mesh
            position={[(i * 10),-2,-10]}
            // rotation={[0,Math.PI / 2 + i * 2 / 2, 0]}
        >
            <planeGeometry 
                ref={planeRef}
                args={[20,10,70,70]}
            ></planeGeometry>
            <meshBasicMaterial
                side={ THREE.DoubleSide }  
                map = { texture }
                // wireframe={true}
            />
        </mesh>
    )
}

and this is the useLayoutEffect() 

useLayoutEffect(() => {

    if (planeRef.current) {
        let g = planeRef.current
        let z = 10            
        let p = g.parameters;
        let hw = p.width * 0.5;
        
        let a = new THREE.Vector2(-hw, 0);
        let b = new THREE.Vector2(0, z);
        let c = new THREE.Vector2(hw, 0);
        
        let ab = new THREE.Vector2().subVectors(a, b);
        let bc = new THREE.Vector2().subVectors(b, c);
        let ac = new THREE.Vector2().subVectors(a, c);
        
        let r = (ab.length() * bc.length() * ac.length()) / (2 * Math.abs(ab.cross(ac)));
        
        let center = new THREE.Vector2(0, z - r);
        let baseV = new THREE.Vector2().subVectors(a, center);
        let baseAngle = baseV.angle() - (Math.PI / 2);
        let arc = baseAngle * 2;
        
        let uv = g.attributes.uv;
        let pos = g.attributes.position;
        let mainV = new THREE.Vector2();
        for (let i = 0; i < uv.count; i++){
            let uvRatio = 1 - uv.getX(i);
            let y = pos.getY(i);
            mainV.copy(c).rotateAround(center, (arc * uvRatio));
            pos.setXYZ(i, mainV.x, y, -mainV.y);
        }
        
        pos.needsUpdate = true;
    }
},[])
